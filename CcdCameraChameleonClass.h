/*----- PROTECTED REGION ID(CcdCameraChameleonClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        CcdCameraChameleonClass.h
//
// description : Include for the CcdCameraChameleon root class.
//               This class is the singleton class for
//                the CcdCameraChameleon device class.
//               It contains all properties and methods which the 
//               CcdCameraChameleon requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef CcdCameraChameleonClass_H
#define CcdCameraChameleonClass_H

#include <tango.h>
#include <CcdCameraChameleon.h>


/*----- PROTECTED REGION END -----*/	//	CcdCameraChameleonClass.h


namespace CcdCameraChameleon_ns
{
/*----- PROTECTED REGION ID(CcdCameraChameleonClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	CcdCameraChameleonClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute frameRate class definition
class frameRateAttrib: public Tango::Attr
{
public:
	frameRateAttrib():Attr("frameRate",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~frameRateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_frameRate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_frameRate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_frameRate_allowed(ty);}
};

//	Attribute brightness class definition
class brightnessAttrib: public Tango::Attr
{
public:
	brightnessAttrib():Attr("brightness",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~brightnessAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_brightness(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_brightness(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_brightness_allowed(ty);}
};

//	Attribute exposure class definition
class exposureAttrib: public Tango::Attr
{
public:
	exposureAttrib():Attr("exposure",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~exposureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_exposure(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_exposure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_exposure_allowed(ty);}
};

//	Attribute gamma class definition
class gammaAttrib: public Tango::Attr
{
public:
	gammaAttrib():Attr("gamma",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~gammaAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gamma(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_gamma(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gamma_allowed(ty);}
};

//	Attribute shutter class definition
class shutterAttrib: public Tango::Attr
{
public:
	shutterAttrib():Attr("shutter",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~shutterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_shutter(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_shutter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_shutter_allowed(ty);}
};

//	Attribute gain class definition
class gainAttrib: public Tango::Attr
{
public:
	gainAttrib():Attr("gain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~gainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_gain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gain_allowed(ty);}
};

//	Attribute x class definition
class xAttrib: public Tango::Attr
{
public:
	xAttrib():Attr("x",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~xAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_x(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_x_allowed(ty);}
};

//	Attribute y class definition
class yAttrib: public Tango::Attr
{
public:
	yAttrib():Attr("y",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~yAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_y(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_y_allowed(ty);}
};

//	Attribute a class definition
class aAttrib: public Tango::Attr
{
public:
	aAttrib():Attr("a",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~aAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_a(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_a_allowed(ty);}
};

//	Attribute b class definition
class bAttrib: public Tango::Attr
{
public:
	bAttrib():Attr("b",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~bAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_b(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_b_allowed(ty);}
};

//	Attribute frameRateAuto class definition
class frameRateAutoAttrib: public Tango::Attr
{
public:
	frameRateAutoAttrib():Attr("frameRateAuto",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~frameRateAutoAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_frameRateAuto(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_frameRateAuto(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_frameRateAuto_allowed(ty);}
};

//	Attribute frameRateOnOff class definition
class frameRateOnOffAttrib: public Tango::Attr
{
public:
	frameRateOnOffAttrib():Attr("frameRateOnOff",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~frameRateOnOffAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_frameRateOnOff(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_frameRateOnOff(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_frameRateOnOff_allowed(ty);}
};

//	Attribute exposureAuto class definition
class exposureAutoAttrib: public Tango::Attr
{
public:
	exposureAutoAttrib():Attr("exposureAuto",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~exposureAutoAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_exposureAuto(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_exposureAuto(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_exposureAuto_allowed(ty);}
};

//	Attribute exposureOnOff class definition
class exposureOnOffAttrib: public Tango::Attr
{
public:
	exposureOnOffAttrib():Attr("exposureOnOff",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~exposureOnOffAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_exposureOnOff(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_exposureOnOff(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_exposureOnOff_allowed(ty);}
};

//	Attribute exposureOnePush class definition
class exposureOnePushAttrib: public Tango::Attr
{
public:
	exposureOnePushAttrib():Attr("exposureOnePush",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~exposureOnePushAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_exposureOnePush(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_exposureOnePush(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_exposureOnePush_allowed(ty);}
};

//	Attribute gammaOnOff class definition
class gammaOnOffAttrib: public Tango::Attr
{
public:
	gammaOnOffAttrib():Attr("gammaOnOff",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~gammaOnOffAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gammaOnOff(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_gammaOnOff(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gammaOnOff_allowed(ty);}
};

//	Attribute gainAuto class definition
class gainAutoAttrib: public Tango::Attr
{
public:
	gainAutoAttrib():Attr("gainAuto",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~gainAutoAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gainAuto(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_gainAuto(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gainAuto_allowed(ty);}
};

//	Attribute gainOnePush class definition
class gainOnePushAttrib: public Tango::Attr
{
public:
	gainOnePushAttrib():Attr("gainOnePush",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~gainOnePushAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gainOnePush(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_gainOnePush(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gainOnePush_allowed(ty);}
};

//	Attribute shutterAuto class definition
class shutterAutoAttrib: public Tango::Attr
{
public:
	shutterAutoAttrib():Attr("shutterAuto",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~shutterAutoAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_shutterAuto(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_shutterAuto(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_shutterAuto_allowed(ty);}
};

//	Attribute shutterOnePush class definition
class shutterOnePushAttrib: public Tango::Attr
{
public:
	shutterOnePushAttrib():Attr("shutterOnePush",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~shutterOnePushAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_shutterOnePush(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_shutterOnePush(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_shutterOnePush_allowed(ty);}
};

//	Attribute temperature class definition
class temperatureAttrib: public Tango::Attr
{
public:
	temperatureAttrib():Attr("temperature",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~temperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_temperature_allowed(ty);}
};

//	Attribute imageWidth class definition
class imageWidthAttrib: public Tango::Attr
{
public:
	imageWidthAttrib():Attr("imageWidth",
			Tango::DEV_LONG, Tango::READ) {};
	~imageWidthAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_imageWidth(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_imageWidth_allowed(ty);}
};

//	Attribute imageHeight class definition
class imageHeightAttrib: public Tango::Attr
{
public:
	imageHeightAttrib():Attr("imageHeight",
			Tango::DEV_LONG, Tango::READ) {};
	~imageHeightAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_imageHeight(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_imageHeight_allowed(ty);}
};

//	Attribute quality class definition
class qualityAttrib: public Tango::Attr
{
public:
	qualityAttrib():Attr("quality",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~qualityAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_quality(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_quality(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_quality_allowed(ty);}
};

//	Attribute phi class definition
class phiAttrib: public Tango::Attr
{
public:
	phiAttrib():Attr("phi",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~phiAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_phi(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_phi_allowed(ty);}
};

//	Attribute scale class definition
class scaleAttrib: public Tango::Attr
{
public:
	scaleAttrib():Attr("scale",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~scaleAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_scale(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->write_scale(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_scale_allowed(ty);}
};

//	Attribute frameRateMin class definition
class frameRateMinAttrib: public Tango::Attr
{
public:
	frameRateMinAttrib():Attr("frameRateMin",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~frameRateMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_frameRateMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_frameRateMin_allowed(ty);}
};

//	Attribute frameRateMax class definition
class frameRateMaxAttrib: public Tango::Attr
{
public:
	frameRateMaxAttrib():Attr("frameRateMax",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~frameRateMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_frameRateMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_frameRateMax_allowed(ty);}
};

//	Attribute exposureMin class definition
class exposureMinAttrib: public Tango::Attr
{
public:
	exposureMinAttrib():Attr("exposureMin",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~exposureMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_exposureMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_exposureMin_allowed(ty);}
};

//	Attribute exposureMax class definition
class exposureMaxAttrib: public Tango::Attr
{
public:
	exposureMaxAttrib():Attr("exposureMax",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~exposureMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_exposureMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_exposureMax_allowed(ty);}
};

//	Attribute brightnessMin class definition
class brightnessMinAttrib: public Tango::Attr
{
public:
	brightnessMinAttrib():Attr("brightnessMin",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~brightnessMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_brightnessMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_brightnessMin_allowed(ty);}
};

//	Attribute brightnessMax class definition
class brightnessMaxAttrib: public Tango::Attr
{
public:
	brightnessMaxAttrib():Attr("brightnessMax",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~brightnessMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_brightnessMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_brightnessMax_allowed(ty);}
};

//	Attribute gammaMin class definition
class gammaMinAttrib: public Tango::Attr
{
public:
	gammaMinAttrib():Attr("gammaMin",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~gammaMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gammaMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gammaMin_allowed(ty);}
};

//	Attribute gammaMax class definition
class gammaMaxAttrib: public Tango::Attr
{
public:
	gammaMaxAttrib():Attr("gammaMax",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~gammaMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gammaMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gammaMax_allowed(ty);}
};

//	Attribute gainMin class definition
class gainMinAttrib: public Tango::Attr
{
public:
	gainMinAttrib():Attr("gainMin",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~gainMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gainMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gainMin_allowed(ty);}
};

//	Attribute gainMax class definition
class gainMaxAttrib: public Tango::Attr
{
public:
	gainMaxAttrib():Attr("gainMax",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~gainMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_gainMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_gainMax_allowed(ty);}
};

//	Attribute shutterMin class definition
class shutterMinAttrib: public Tango::Attr
{
public:
	shutterMinAttrib():Attr("shutterMin",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~shutterMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_shutterMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_shutterMin_allowed(ty);}
};

//	Attribute shutterMax class definition
class shutterMaxAttrib: public Tango::Attr
{
public:
	shutterMaxAttrib():Attr("shutterMax",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~shutterMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_shutterMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_shutterMax_allowed(ty);}
};

//	Attribute imageEncodedJpeg class definition
class imageEncodedJpegAttrib: public Tango::SpectrumAttr
{
public:
	imageEncodedJpegAttrib():SpectrumAttr("imageEncodedJpeg",
			Tango::DEV_UCHAR, Tango::READ, 1228800) {};
	~imageEncodedJpegAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_imageEncodedJpeg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_imageEncodedJpeg_allowed(ty);}
};

//	Attribute fullImage class definition
class fullImageAttrib: public Tango::ImageAttr
{
public:
	fullImageAttrib():ImageAttr("fullImage",
			Tango::DEV_UCHAR, Tango::READ, 1280, 960) {};
	~fullImageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<CcdCameraChameleon *>(dev))->read_fullImage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<CcdCameraChameleon *>(dev))->is_fullImage_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command play class definition
class playClass : public Tango::Command
{
public:
	playClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	playClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~playClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CcdCameraChameleon *>(dev))->is_play_allowed(any);}
};

//	Command pause class definition
class pauseClass : public Tango::Command
{
public:
	pauseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	pauseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~pauseClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CcdCameraChameleon *>(dev))->is_pause_allowed(any);}
};

//	Command setExposure class definition
class setExposureClass : public Tango::Command
{
public:
	setExposureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	setExposureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~setExposureClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CcdCameraChameleon *>(dev))->is_setExposure_allowed(any);}
};


/**
 *	The CcdCameraChameleonClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  CcdCameraChameleonClass : public Tango::DeviceClass
#else
class CcdCameraChameleonClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(CcdCameraChameleonClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	CcdCameraChameleonClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static CcdCameraChameleonClass *init(const char *);
		static CcdCameraChameleonClass *instance();
		~CcdCameraChameleonClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		CcdCameraChameleonClass(string &);
		static CcdCameraChameleonClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	CcdCameraChameleon_H
